### EVAL RECIPE
## add "top_down_view" top visual_type
## set EVAL_CKPT_PATH
## set NUM_PROCESSES=14
## SIMULATOR_GPU_ID=0, TORCH_GPU_ID=0, N_GPUS=1
## i is enough

BASE_TASK_CONFIG_PATH: "configs/point_nav_habitat_challenge_2020.yaml"

# training settings
ENGINE_NAME: "efficient_ddppo"
ENV_NAME: "NavRLEnv"
SENSORS: ["DEPTH_SENSOR", "RGB_SENSOR"]
NUM_UPDATES: 2500
NUM_PROCESSES: 24
SIMULATOR_GPU_ID: 0
TORCH_GPU_ID: 1
N_GPUS: -1

# logging settings
LOG_DIR: "train_log/rl/vit/"
LOG_FILE: "{{LOG_DIR}}/train.log"
INFO_DIR: "{{LOG_DIR}}/infos"
CHECKPOINT_FOLDER: "{{LOG_DIR}}/checkpoints"
TENSORBOARD_DIR: "{{LOG_DIR}}/tb"
VIDEO_OPTION: ["wandb"]   # choices: ["none", "disk", "tensorboard", "wandb"], "none" is used for storing image info but not generating video
VIDEO_DIR: "{{LOG_DIR}}/videos"
CHECKPOINT_INTERVAL: -1
LOG_INTERVAL: 1

DEBUG: False

# evaluation settings
EVAL:
  SPLIT: val
  TEST_EPISODE_COUNT: -1
  SAVE_RANKED_IMGS: False
  RANK_TOP_K: 1
  RESIZE_TOPDOWN_MAP: False
  DRAW_SHORTEST_PATH: True

  EVAL_WITH_CKPT: True

  # EVAL_CKPT_PATH: "pretrained_ckpts/rl/tune_vo/rl_tune_vo.pth"  # path to the checkpoint you want to evaluate with
  # EVAL_CKPT_PATH : "train_log/rl/vit/seed_100-rl-train-vo_1-noise_rgb_1_depth_1_act_1-depth_sensor_rgb_sensor-model_resnet_rnn_policy-visual_resnet18-rnn_LSTM_2-updates_15000-minibatch_2-ngpu_8-proc_16-lr_0.0001-20220329_123010262981/checkpoints/ckpt_97.update_4850.frames_9934848.pth"  # path to the checkpoint you want to evaluate with
  EVAL_CKPT_PATH : "Xtrain_log/rl/vit/seed_100-rl-train-vo_1-noise_rgb_1_depth_1_act_1-depth_sensor_rgb_sensor-model_resnet_rnn_policy-visual_resnet18-rnn_LSTM_2-updates_15000-minibatch_2-ngpu_8-proc_16-lr_0.0001-20220329_123010262981/checkpoints/ckpt_50.update_2500.frames_5122048.pth"  # path to the checkpoint you want to evaluate with


RESUME_TRAIN: False
RESUME_STATE_FILE: "Xresume_train_ckpt.pth"   # path to the checkpoint you want to resume training from

RL:
  SUCCESS_REWARD: 2.5

  OBS_TRANSFORM: "none"   # choices: ["none", "resize", "resize_crop"]
  VIS_SIZE_W: 341
  VIS_SIZE_H: 192

  TUNE_WITH_VO: True

  Policy:
    name: "resnet_rnn_policy"
    visual_backbone: "resnet18"
    rnn_backbone: "LSTM"
    num_recurrent_layers: 2
    visual_types: ["depth"]

  PPO:
    # ppo params
    clip_param: 0.2
    ppo_epoch: 1
    num_mini_batch: 2
    value_loss_coef: 0.5
    entropy_coef: 0.01
    lr: 1.e-4    # 1e-4 (tune with vo), 2.5e-4 (train from scratch)
    eps: 1e-5
    max_grad_norm: 0.2
    num_steps: 128
    use_gae: True
    gamma: 0.99
    tau: 0.95
    use_linear_clip_decay: False
    use_linear_lr_decay: False
    reward_window_size: 50

    use_normalized_advantage: False

    hidden_size: 512

  DDPPO:
    sync_frac: 0.6
    # The PyTorch distributed backend to use
    # distrib_backend: GLOO
    distrib_backend: NCCL
    # Initialize with pretrained weights
    pretrained: True # False
    # Visual encoder backbone
    pretrained_weights: "/datasets/home/memmel/PointNav-VO/pretrained_ckpts/rl/no_tune/rl_no_tune.pth"
    # Initialize just the visual encoder backbone with pretrained weights
    pretrained_encoder: True # False
    # Whether or not the visual encoder backbone will be trained.
    train_encoder: True # True
    # Whether or not to reset the critic linear layer
    reset_critic: False

VO:
  USE_VO_MODEL: True

  VO_TYPE: "REGRESS"

  OBS_TRANSFORM: "none"
  VIS_SIZE_W: 341
  VIS_SIZE_H: 192

  REGRESS_MODEL:
    name: "vo_transformer_act_embed"
    visual_backbone: "base" 
    train_backbone: True
    pretrain_backbone: 'mmae'
    cls_action: True
    visual_type: ["rgb", "depth", "top_down_view"]
    hidden_size: 512
    custom_model_path: 'pretrained'
    discretize_depth: "none"
    discretized_depth_channels: 0
    dropout_p: 0.

    regress_type: "unified_act"   # choices: ["unified_act", "sep_act"]
    mode: "det"  # choices: ["rnd", "det"]
    rnd_mode_n: 10
    pretrained: True
    pretrained_type: "rgb_inv_joint"
    all_pretrained_ckpt: {
      "rgb_inv_joint": {
        "all": "train_log/vit/seed_100-vo-noise_1-train-rgb_d-dd_none_0-m_cen_0-act_-1-model_vo_transformer_act_embed-base-geo_inv_joint_inv_w_1-l_mult_fix_1-1.0_1.0_1.0-dpout_0-e_150-b_56-lr_0.0002-w_de_0.0-20220328_105416598272/checkpoints/ckpt_epoch_140.pth",
        },
    }

    # # choices:
    # # [vo_cnn, vo_cnn_rgb, vo_cnn_wider, vo_cnn_deeper,
    # #  vo_cnn_act_embed, vo_cnn_wider_act_embed,
    # #  vo_cnn_rgb_d_dd, vo_cnn_rgb_d_top_down, vo_cnn_rgb_dd_top_down, vo_cnn_d_dd_top_down,
    # #  vo_cnn_rgb_d_dd_top_down]
    # name: "vo_cnn_rgb_d_dd_top_down"
    # visual_backbone: "resnet18"
    # hidden_size: 512
    # visual_type: ["rgb", "depth", "discretized_depth", "top_down_view"]  # choices: ["rgb", "depth", "discretized_depth", "top_down_view"]
    # dropout_p: 0.2

    # discretize_depth: "hard"  # choices: ['none', 'hard']
    # discretized_depth_channels: 10

    # regress_type: "sep_act"   # choices: ["unified_act", "sep_act"]
    # mode: "det"  # choices: ["rnd", "det"]
    # rnd_mode_n: 10
    # pretrained: True
    # pretrained_type: "rgb_d_dd_top_down_inv_joint"
    # all_pretrained_ckpt: {
    #   "rgb_d_dd_top_down_inv_joint": {
    #     "forward": "pretrained_ckpts/vo/act_forward.pth",
    #     "left": "pretrained_ckpts/vo/act_left_right_inv_joint.pth",
    #     "right": "pretrained_ckpts/vo/act_left_right_inv_joint.pth",
    #   },
    # }

